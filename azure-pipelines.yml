pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  productName: 'RegionToShare'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages'

steps:
- task: PowerShell@1
  displayName: 'Set build version'
  inputs:
    scriptType: inlineScript
    inlineScript: |
        (new-object Net.WebClient).DownloadString("https://raw.github.com/tom-englert/BuildScripts/master/BuildScripts.ps1") | iex
        $version = Project-SetVersion "src\Directory.Build.props"
        $version | Build-AppendVersionToBuildNumber
        [xml]$manifest= get-content ".\src\Packaging\Package.appxmanifest"
        $manifest.Package.Identity.Version = $version + ".0"
        $manifest.save(".\src\Packaging\Package.appxmanifest")
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:AppxPackageSigningEnabled=false'

# only copies binaries of the defined buildPlatform. While the app bundle may contain multiple
- task: CopyFiles@2
  inputs:
    Contents: 'src/RegionToShare/bin/$(buildPlatform)/$(buildConfiguration)/net462/*.*'
    TargetFolder: '$(build.artifactstagingdirectory)/bin'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/bin'
    ArtifactName: '$(productName)'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(appxPackageDir)'
    ArtifactName: 'Package'
    publishLocation: 'Container'

